package View;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;

/**
 * This class represents the instructions panel of the game responsible for displaying
 * instructions of the game
 */
public class Instructions {
    private static Instructions self;
    private static final String NAME = "instructions";

    private JPanel instructionsPanel;
    private JLabel instructionsLabel;
    private JButton backButton;

    /**
     * Constructor of the Instructions class
     * Sets up the spacings of the components
     */
    private Instructions() {
        setSize();
        setBorders();
    }

    /**
     * Gets the name of this panel.
     */
    public String getName() {
        return NAME;
    }

    /**
     * Gets singleton instance of this class
     */
    public static Instructions getInstance() {
        if (self == null) {
            self = new Instructions();
        }
        return self;
    }

    /**
     * This function is responsible for setting borders of the components in the form
     */
    private void setBorders() {
        instructionsLabel.setBorder(new EmptyBorder(0, 10, 0, 10));
    }

    /**
     * This function is responsible for setting sizes of the components in the form
     */
    private void setSize() {
        instructionsLabel.setPreferredSize(new Dimension(1000, 500));
    }

    /**
     * This method returns the panel of the Instructions form
     *
     * @return the instructions panel
     */
    public JPanel getPanel() {
        return instructionsPanel;
    }


    /**
     * @return Back button.
     */
    public JButton getBackButton() {
        return backButton;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        instructionsPanel = new JPanel();
        instructionsPanel.setLayout(new GridBagLayout());
        instructionsPanel.setName("instructionsPanel");
        instructionsLabel = new JLabel();
        instructionsLabel.setName("instructionsLabel");
        instructionsLabel.setText("<html><h2>Board Instructions: </h2>  <p>Toguz Korgool employs a board such as the one shown below. The board consists of two sides: a white/light side and a black/dark side. The player on the white/light side starts the board. Each player side has nine holes, numbered 1-9 from left to right, and one larger rectangular store called the player's kazan. Initially, 162 korgools (small round stones) are distributed equally over the 18 holes in the board: 9 korgools per hole. No stones are placed in the player's kazans.</p>  <h2>Moves: </h2>  <p>Players make moves by selecting one of the holes on their side of the board that contains korgools. A move consists of taking all the korgools from the selected hole and redistributing or seeding them to other holes in the anticlockwise direction. The first korgool is put in the hole the korgools were taken from. The next korgool goes in the adjacent hole to the right, and so on. Once the player has dropped a korgool in hole 9, the next korgool goes into hole 1 of the other player, and so on. </p>  <h2>Rules</h2> <ul> <li>The player on the white/light side makes the first move. Players alternate between making moves.</li> <li>The normal redistribution rule does not apply if there is only one korgool in a hole. If there is only one korgool in a hole and that hole is selected for a move, the hole is emptied and the korgool is moved to the next hole.</li> <li>If the last korgool in a move ends up in an opponent's hole, and the number of korgools in that hole is now even, then the player captures all the korgools in that hole. The korgools are moved into the player's kazan.</li> <li>If the last korgool in a move ends up in the player's own side, nobody captures these korgools.</li> <li>If the last korgool in a move ends up in an opponent's hole, and the number of korgools in that hole is now odd, then nobody captures these korgools.</li> <li>If the last korgool in a move ends up in an opponent's hole containing two korgools (i.e. the hole contains three korgools at the end of the move), then this hole is marked as a tuz. This means that this hole now belongs to the player who claimed the tuz and all korgools in the tuz are transferred to the owner's kazan. The following restrictions apply: <ul> <li>Each player can claim only one tuz.</li> <li>A tuz cannot be moved.</li> <li>Hole 9 cannot be claimed as tuz.</li> <li>If one player has claimed hole n as tuz, then their opponent can no longer claim hole n on the opposite side as tuz.</li> </ul> </li>   <li>The board ends when one player has collected 82 or more korgools in their kazan.</li> </ul>   </html>");
        instructionsLabel.setVerticalAlignment(1);
        instructionsLabel.setVerticalTextPosition(1);
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridheight = 2;
        gbc.anchor = GridBagConstraints.NORTHWEST;
        instructionsPanel.add(instructionsLabel, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.gridheight = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        instructionsPanel.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.VERTICAL;
        instructionsPanel.add(spacer2, gbc);
        backButton = new JButton();
        backButton.setName("backButton");
        backButton.setText("Back");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        instructionsPanel.add(backButton, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return instructionsPanel;
    }
}


